---
description: UI build and UX consideration
globs: 
alwaysApply: false
---
# Frontend Environment Rules

## Core Framework
- **Framework**: React with Shadcn UI + Tailwind CSS
- **Rendering**: Client-side only (Electron)
- **State Management**: Zustand (preferred), local state when isolated
- **Safety Layer**: Validation state management with safety checkpoints

## Component Architecture
- **Component Boundaries**:
  - UI elements should be modular
  - Reusable form and checklist components encouraged
  - Use features/ folder for domain-specific UIs (e.g., inspections, repairs)
  - Safety validation components must be isolated
  - Measurement components require validation wrappers
  - Error state components for safety feedback

## Measurement Validation

### Line Measurement
- Modal warnings for:
  - Cascade group deviation >10mm
  - Tab length variation >5mm
  - Wrong line position
  - Material mismatch
- Validation feedback:
  - Clear error messages
  - Measurement guidance
  - Re-measurement prompts
  - Safety warnings

### Riser System
- Modal warnings for:
  - Riser length difference >15mm
  - Trim system position
  - Tandem variations
  - Back riser trimmer
- Validation feedback:
  - Position guidance
  - System checks
  - Safety warnings
  - Measurement prompts

### General Measurements
- Modal warnings for:
  - Laser measurement errors
  - Environmental factors
  - Tool calibration
  - Operator handling
- Validation feedback:
  - Clear instructions
  - Tool guidance
  - Safety checks
  - Re-measurement prompts

## Styling Rules
- **Base Rules**:
  - Tailwind utility-first
  - Custom themes must follow accessibility contrast standards
  - Avoid hardcoding colors, use theme tokens
  - Safety-critical elements must use high-contrast indicators
  - Validation states must be visually distinct
  - Error states must be immediately apparent

## Shadcn/ui Components (`src/components`)

- This project utilizes components based on the [Shadcn/ui](mdc:https:/ui.shadcn.com) library, primarily located within the `src/components` directory and its subdirectories (e.g., `src/components/ui`).
- Many of these components follow patterns and styles inspired by common admin dashboard layouts built with Shadcn/ui.
- **Usage:** When building UI features, prefer using or adapting existing components from `src/components` to maintain visual consistency.
- **Customization:** Components are typically self-contained or rely on utilities (e.g., `cn` for merging Tailwind classes). Refer to the Shadcn/ui documentation for underlying principles if deeper customization is needed.
- **Adding New Components:** If adding new components inspired by Shadcn/ui, follow the existing structure and conventions within `src/components`.

## TailwindCSS Conventions

- **Primary Styling Method:** Use Tailwind CSS utility classes directly in your JSX for styling.
- **Avoid Inline Styles:** Generally avoid using the `style` prop unless absolutely necessary for dynamic styles that cannot be achieved with Tailwind classes.
- **Reusability:** For complex or frequently reused style combinations, consider:
  - Creating reusable React components that encapsulate the structure and styling.
  - If necessary, using `@apply` within a global CSS file (`src/client/index.css` or similar) to create custom reusable classes, but prefer component composition first.
    ```css
    /* Example in index.css */
    @tailwind base;
    @tailwind components;
    @tailwind utilities;

    .btn-primary {
      @apply px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300;
    }
    ```
- **Responsive Design:** Use Tailwind's responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`) to apply styles conditionally based on screen size.
  - âœ… `<div class="w-full md:w-1/2 lg:w-1/3">...</div>`
- **Configuration:** If you need to customize Tailwind (e.g., add custom colors, fonts, spacing), modify the `@tailwind.config.js` file in the project root. 

## Safety-First UI Patterns

### Validation Feedback
- Clear visual indicators for validation states
- Immediate feedback for measurement errors
- Prominent safety checkpoint indicators
- Clear error messaging for critical issues
- Validation state persistence
- Safety narrative tracking
- Measurement verification feedback

### Error Prevention
- Confirmation dialogs for critical actions
- Validation before state changes
- Safety checkpoint reminders
- Measurement verification prompts
- Data integrity warnings
- Session state protection
- Manufacturer compliance checks

### User Guidance
- Clear safety instructions
- Validation guidance
- Error recovery assistance
- Measurement verification help
- Safety narrative support
- Session state guidance
- Data integrity assistance

## UX Requirements

### Core Requirements
- Must function offline
- Minimal UI clutter
- Keyboard shortcuts encouraged
- Prefer dropdowns with auto-complete for technician speed
### Safety Requirements
- Clear validation state indication
- Immediate error feedback
- Safety checkpoint visibility
- Measurement verification
- Data integrity protection
- Session state protection
- Manufacturer compliance

### Performance Requirements
- Fast validation response
- Quick measurement feedback
- Efficient state management
- Smooth error recovery
- Rapid safety checks
- Quick data verification
- Fast session recovery

## Component Guidelines

### Form Components
- Validation state management
- Error state handling
- Safety checkpoint integration
- Measurement verification
- Data integrity protection
- Session state management
- Manufacturer compliance

### Display Components
- Clear validation indicators
- Error state visualization
- Safety checkpoint display
- Measurement verification
- Data integrity feedback
- Session state indication
- Manufacturer compliance

### Interactive Components
- Validation state feedback
- Error state recovery
- Safety checkpoint interaction
- Measurement verification
- Data integrity protection
- Session state management
- Manufacturer compliance

## State Management

### Safety State
- Validation state tracking
- Error state management
- Safety checkpoint state
- Measurement verification
- Data integrity state
- Session state protection
- Manufacturer compliance

### User State
- Technician preferences
- Session state
- Validation state
- Error state
- Safety state
- Measurement state
- Data state

### System State
- Application state
- Validation state
- Error state
- Safety state
- Measurement state
- Data state
- Session state

## Modal Guidelines

### Measurement Validation
- Clear warning messages
- Specific error details
- Re-measurement guidance
- Safety implications
- Action buttons
- Cancel options
- Help resources

### Safety Checkpoints
- Critical point warnings
- Validation requirements
- Safety implications
- Action guidance
- Cancel options
- Help resources
- Documentation links

### Error Recovery
- Clear error messages
- Recovery steps
- Safety implications
- Action guidance
- Cancel options
- Help resources
- Documentation links

