---
description: Framework of database and information held in the app.
globs: 
alwaysApply: false
---

# Database Schema Rules (Prisma)

## General Setup
- **DB Engine**: SQLite (local-first)
- **ORM**: Prisma
- **Storage Strategy**: Modular, traceable file-backed database with human-readable structure
- **Data Domains**:
  - üè≠ Manufacturer Data (Reference)
  - üõ†Ô∏è Workshop Data (Live / Diagnostic)

---

## üè≠ Manufacturer Data (Static / Reference)

Tables used to store static or semi-static data from glider manufacturers. May be scraped, manually entered, or imported.

### `GliderModel`
- `id`
- `modelName`
- `manufacturer`
- `manualURL`
- `notes`
- Relations: `GliderSize[]`, `LineSet[]`

### `GliderSize`
- `id`
- `sizeLabel` (e.g. XS, S, M, L)
- `weightRangeMin`
- `weightRangeMax`
- `wingArea`
- `flatAspectRatio`
- `lineSetId` (FK to `LineSet`)
- `notes`
- Relation: `GliderModel`

### `LineSet`
- `id`
- `namingScheme` (A1, A2, B3, ST, etc.)
- `hierarchy` (main -> mid -> upper)
- `materialType` (Dyneema, Aramid, Vectran)
- `nominalStrength` (daN)
- `nominalLength` (mm)
- `diameter`
- `color`
- `notes`
- Relations: `LineCascade[]`, `GliderSize[]`

### `LineCascade`
- `id`
- `name` (e.g. Group1, Group2‚Ä¶)
- `row` (A, B, C, D)
- `lines` (e.g. A1, A2, B3)
- `groupingLogic` (JSON)
- `anchor` (cloth or riser)
- `includesRiserLength`: boolean
- Relation: `LineSet`

---

## üõ†Ô∏è Workshop Data (Dynamic / Service)

These are the mutable records generated by technicians during inspections and repairs. Always linked to reference data where applicable.

### `Client`
- `id`
- `name`
- `email`
- `phone`
- `address`
- `notes`

### `Equipment`
- `id`
- `type` (Glider, Reserve, Harness)
- `brand`
- `model`
- `serialNumber`
- `sizeLabel`
- `clientId`
- `gliderModelId` (optional)
- `notes`

### `InspectionSession`
- `id`
- `equipmentId`
- `technician`
- `date`
- `trimProfileBefore`
- `trimProfileAfter`
- `porosityMeasurements` (JSON)
- `clothStrength`
- `lineStrengthNotes`
- `visualComments`
- `archSnapshotPath`
- `reportPDFPath`
- `imagePaths` (JSON)

### `TrimAdjustment`
- `id`
- `inspectionId`
- `lineName`
- `initialLoopCount`
- `finalLoopCount`
- `recommendedByApp`
- `confirmedByTech`
- `notes`

### `RepairLog`
- `id`
- `sessionId`
- `repairType` (Cloth, Line, Riser)
- `location` (e.g. "Bottom surface panel 3", or "Group1-A1")
- `description`
- `severity`
- `partsUsed`
- `notes`

### `Tool`
- `id`
- `name`
- `type` (Laser, Tension Gauge, Template, etc.)
- `calibrationDate`
- `calibrationDue`
- `dispersionProfile` (JSON or notes)
- `notes`

---

## üìè Calculated Logic Fields (Optional, Virtual)

Used in-app but not stored in database unless denormalized:
- **Trim Differential Table**
  - Calculated from line data at inspection time vs reference
- **Cloth Score**
  - Computed from porosity + tear test + technician remarks
- **Airworthiness Flag**
  - Triggered by deviation outside APPI specs

---

## Special Rules

- **Grouping Logic**: Default cascade grouping follows manufacturer or APPI spec unless overridden with `manualGrouping`
- **Symmetry**: Assumed unless `isAsymmetrical = true`
- **Anchor Point**: Always specify if trim measurements start from cloth, riser, or both
- **Field Traceability**: All modifications must reference original `LineSet` and `GliderModel` when available
- **Reference Versions**: Manufacturer data should be versioned and not overwritten

---

## Example File Structure (Local Filesystem Schema)
```/clients/
Skye/
gliders/
ozone-rush4/
2025-06-01-session.json
report.pdf
photo.jpg```

```/manufacturer/
ozone/
rush4/
lineset.json
material.json
sizeSpec.json
manual.pdf```