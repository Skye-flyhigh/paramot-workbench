// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core validation models
model ValidationRule {
  id          String   @id @default(uuid())
  type        String   // APPI, SAFETY, CUSTOM
  name        String
  description String
  parameters  Json     // Validation rule parameters
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([type])
}

model Validation {
  id              String   @id @default(uuid())
  gliderModel     String
  validationType  String   // APPI, SAFETY, CUSTOM
  status          String   // PASS, FAIL, WARNING
  details         Json     // Validation results
  technicianId    String
  technician      Technician @relation(fields: [technicianId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([gliderModel])
}

model ManufacturerData {
  id          String   @id @default(uuid())
  brand       String
  model       String
  data        Json     // Manufacturer specifications
  source      String   // OFFICIAL, CUSTOM
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([brand, model])
  @@index([brand, model])
}

model Technician {
  id            String   @id @default(uuid())
  name          String
  certification String
  validations   Validation[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([certification])
}

// Prisma schema for paraMOT Workbench
// Supports both physical line measurements and group-based trim analysis

model GliderManufacturer {
  id          Int
  brand       string
  model       GliderModel[]
  inspectionSessions InspectionSession[]
}

model GliderModel {
  id           Int          @id @default(autoincrement())
  brand        String
  modelName    String
  notes        String?
  sizes        GliderSize[]
  lineSets     LineSet[]
  inspectionSessions InspectionSession[]
}

model GliderSize {
  id           Int          @id @default(autoincrement())
  sizeLabel    String
  minWeight    Int
  maxWeight    Int
  wingArea     Float?
  aspectRatio  Float?
  gliderModel  GliderModel  @relation(fields: [gliderModelId], references: [id])
  gliderModelId Int
  lineSets     LineSet[]
  inspectionSessions InspectionSession[]
  sizeLineLengths SizeLineLengths[]
}

model LineSet {
  id           Int          @id @default(autoincrement())
  name         String
  gliderModel  GliderModel  @relation(fields: [gliderModelId], references: [id])
  gliderModelId Int
  gliderSize   GliderSize   @relation(fields: [gliderSizeId], references: [id])
  gliderSizeId Int
  physicalLines PhysicalLine[]
  groupMappings GroupMapping[]
}

model PhysicalLine {
  id           Int          @id @default(autoincrement())
  lineLabel    String       // e.g. A7, B3
  position     Int          // 1-13, etc.
  lineSet      LineSet      @relation(fields: [lineSetId], references: [id])
  lineSetId    Int
  groupMappings GroupMapping[]
  measurements LineMeasurement[]
}

model GroupMapping {
  id           Int          @id @default(autoincrement())
  lineSet      LineSet      @relation(fields: [lineSetId], references: [id])
  lineSetId    Int
  physicalLine PhysicalLine @relation(fields: [physicalLineId], references: [id])
  physicalLineId Int
  groupLabel   String       // e.g. G1A, G2B, STA
}

model InspectionSession {
  id           Int          @id @default(autoincrement())
  gliderModel  GliderModel  @relation(fields: [gliderModelId], references: [id])
  gliderModelId Int
  gliderSize   GliderSize   @relation(fields: [gliderSizeId], references: [id])
  gliderSizeId Int
  date         DateTime     @default(now())
  technician   String
  lineMeasurements LineMeasurement[]
  groupAnalyses GroupAnalysis[]
}

model LineMeasurement {
  id           Int          @id @default(autoincrement())
  inspection   InspectionSession @relation(fields: [inspectionSessionId], references: [id])
  inspectionSessionId Int
  physicalLine PhysicalLine @relation(fields: [physicalLineId], references: [id])
  physicalLineId Int
  measuredLength Float
}

model GroupAnalysis {
  id           Int          @id @default(autoincrement())
  inspection   InspectionSession @relation(fields: [inspectionSessionId], references: [id])
  inspectionSessionId Int
  groupLabel   String       // e.g. G1A, G2B, STA
  result       String       // pass/fail/notes
  correction   String?      // suggested correction
  details      String?      // JSON or text for extra info
}

model SizeLineLengths {
  id           Int          @id @default(autoincrement())
  gliderSize   GliderSize   @relation(fields: [gliderSizeId], references: [id])
  gliderSizeId Int
  lengths      Json         // { A: [...], B: [...], ... }
}
